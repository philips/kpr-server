// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package kprpb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Descriptor
	PackageManifest
	ListRequest
	ListResponse
	ListTagsRequest
	ListTagsResponse
	TagRequest
	BlobRequest
	BlobResponse
*/
package kprpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Descriptor struct {
	MediaType string `protobuf:"bytes,1,opt,name=mediaType" json:"mediaType,omitempty"`
	Size      int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Digest    string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
}

func (m *Descriptor) Reset()                    { *m = Descriptor{} }
func (m *Descriptor) String() string            { return proto.CompactTextString(m) }
func (*Descriptor) ProtoMessage()               {}
func (*Descriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PackageManifest struct {
	SchemaVersion int64         `protobuf:"varint,1,opt,name=schemaVersion" json:"schemaVersion,omitempty"`
	MediaType     string        `protobuf:"bytes,2,opt,name=mediaType" json:"mediaType,omitempty"`
	Package       *Descriptor   `protobuf:"bytes,3,opt,name=package" json:"package,omitempty"`
	Dependencies  []*Descriptor `protobuf:"bytes,4,rep,name=dependencies" json:"dependencies,omitempty"`
	Packages      []*Descriptor `protobuf:"bytes,5,rep,name=packages" json:"packages,omitempty"`
}

func (m *PackageManifest) Reset()                    { *m = PackageManifest{} }
func (m *PackageManifest) String() string            { return proto.CompactTextString(m) }
func (*PackageManifest) ProtoMessage()               {}
func (*PackageManifest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PackageManifest) GetPackage() *Descriptor {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *PackageManifest) GetDependencies() []*Descriptor {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *PackageManifest) GetPackages() []*Descriptor {
	if m != nil {
		return m.Packages
	}
	return nil
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListResponse struct {
	Repos []*ListResponse_Repos `protobuf:"bytes,1,rep,name=repos" json:"repos,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResponse) GetRepos() []*ListResponse_Repos {
	if m != nil {
		return m.Repos
	}
	return nil
}

type ListResponse_Repos struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListResponse_Repos) Reset()                    { *m = ListResponse_Repos{} }
func (m *ListResponse_Repos) String() string            { return proto.CompactTextString(m) }
func (*ListResponse_Repos) ProtoMessage()               {}
func (*ListResponse_Repos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ListTagsRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListTagsRequest) Reset()                    { *m = ListTagsRequest{} }
func (m *ListTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTagsRequest) ProtoMessage()               {}
func (*ListTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListTagsResponse struct {
	Name string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags []*ListTagsResponse_Tags `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *ListTagsResponse) Reset()                    { *m = ListTagsResponse{} }
func (m *ListTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTagsResponse) ProtoMessage()               {}
func (*ListTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListTagsResponse) GetTags() []*ListTagsResponse_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListTagsResponse_Tags struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListTagsResponse_Tags) Reset()                    { *m = ListTagsResponse_Tags{} }
func (m *ListTagsResponse_Tags) String() string            { return proto.CompactTextString(m) }
func (*ListTagsResponse_Tags) ProtoMessage()               {}
func (*ListTagsResponse_Tags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type TagRequest struct {
	Name string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tag  string      `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Desc *Descriptor `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TagRequest) GetDesc() *Descriptor {
	if m != nil {
		return m.Desc
	}
	return nil
}

type BlobRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Digest string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	Blob   []byte `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *BlobRequest) Reset()                    { *m = BlobRequest{} }
func (m *BlobRequest) String() string            { return proto.CompactTextString(m) }
func (*BlobRequest) ProtoMessage()               {}
func (*BlobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type BlobResponse struct {
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *BlobResponse) Reset()                    { *m = BlobResponse{} }
func (m *BlobResponse) String() string            { return proto.CompactTextString(m) }
func (*BlobResponse) ProtoMessage()               {}
func (*BlobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Descriptor)(nil), "kprpb.Descriptor")
	proto.RegisterType((*PackageManifest)(nil), "kprpb.PackageManifest")
	proto.RegisterType((*ListRequest)(nil), "kprpb.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "kprpb.ListResponse")
	proto.RegisterType((*ListResponse_Repos)(nil), "kprpb.ListResponse.Repos")
	proto.RegisterType((*ListTagsRequest)(nil), "kprpb.ListTagsRequest")
	proto.RegisterType((*ListTagsResponse)(nil), "kprpb.ListTagsResponse")
	proto.RegisterType((*ListTagsResponse_Tags)(nil), "kprpb.ListTagsResponse.Tags")
	proto.RegisterType((*TagRequest)(nil), "kprpb.TagRequest")
	proto.RegisterType((*BlobRequest)(nil), "kprpb.BlobRequest")
	proto.RegisterType((*BlobResponse)(nil), "kprpb.BlobResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Repo service

type RepoClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	GetTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*PackageManifest, error)
	PutTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Descriptor, error)
	DeleteTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Descriptor, error)
}

type repoClient struct {
	cc *grpc.ClientConn
}

func NewRepoClient(cc *grpc.ClientConn) RepoClient {
	return &repoClient{cc}
}

func (c *repoClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/kprpb.Repo/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	out := new(ListTagsResponse)
	err := grpc.Invoke(ctx, "/kprpb.Repo/ListTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoClient) GetTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*PackageManifest, error) {
	out := new(PackageManifest)
	err := grpc.Invoke(ctx, "/kprpb.Repo/GetTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoClient) PutTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Descriptor, error) {
	out := new(Descriptor)
	err := grpc.Invoke(ctx, "/kprpb.Repo/PutTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoClient) DeleteTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Descriptor, error) {
	out := new(Descriptor)
	err := grpc.Invoke(ctx, "/kprpb.Repo/DeleteTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Repo service

type RepoServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	GetTag(context.Context, *TagRequest) (*PackageManifest, error)
	PutTag(context.Context, *TagRequest) (*Descriptor, error)
	DeleteTag(context.Context, *TagRequest) (*Descriptor, error)
}

func RegisterRepoServer(s *grpc.Server, srv RepoServer) {
	s.RegisterService(&_Repo_serviceDesc, srv)
}

func _Repo_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Repo/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repo_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Repo/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repo_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Repo/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).GetTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repo_PutTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).PutTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Repo/PutTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).PutTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repo_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Repo/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServer).DeleteTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kprpb.Repo",
	HandlerType: (*RepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Repo_List_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _Repo_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _Repo_GetTag_Handler,
		},
		{
			MethodName: "PutTag",
			Handler:    _Repo_PutTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Repo_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Blob service

type BlobClient interface {
	PutBlob(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*Descriptor, error)
	// TODO: custom marshaller
	GetBlob(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*BlobResponse, error)
}

type blobClient struct {
	cc *grpc.ClientConn
}

func NewBlobClient(cc *grpc.ClientConn) BlobClient {
	return &blobClient{cc}
}

func (c *blobClient) PutBlob(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*Descriptor, error) {
	out := new(Descriptor)
	err := grpc.Invoke(ctx, "/kprpb.Blob/PutBlob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobClient) GetBlob(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*BlobResponse, error) {
	out := new(BlobResponse)
	err := grpc.Invoke(ctx, "/kprpb.Blob/GetBlob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blob service

type BlobServer interface {
	PutBlob(context.Context, *BlobRequest) (*Descriptor, error)
	// TODO: custom marshaller
	GetBlob(context.Context, *BlobRequest) (*BlobResponse, error)
}

func RegisterBlobServer(s *grpc.Server, srv BlobServer) {
	s.RegisterService(&_Blob_serviceDesc, srv)
}

func _Blob_PutBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServer).PutBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Blob/PutBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServer).PutBlob(ctx, req.(*BlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blob_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kprpb.Blob/GetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServer).GetBlob(ctx, req.(*BlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kprpb.Blob",
	HandlerType: (*BlobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutBlob",
			Handler:    _Blob_PutBlob_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _Blob_GetBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x94, 0xd1, 0x4e, 0xd4, 0x50,
	0x10, 0x86, 0xd3, 0xdd, 0xee, 0x02, 0xc3, 0x22, 0x38, 0x28, 0xd4, 0x02, 0x11, 0x8b, 0x04, 0xc4,
	0xb0, 0x35, 0x18, 0x6f, 0x48, 0xbc, 0x31, 0x18, 0x6e, 0x24, 0x21, 0x0d, 0x21, 0xa2, 0x26, 0xe6,
	0xec, 0xee, 0x58, 0x1b, 0x96, 0x9e, 0xda, 0x73, 0x30, 0x2a, 0xe1, 0xc6, 0x57, 0xf0, 0x5d, 0x7c,
	0x02, 0xdf, 0xc0, 0x57, 0xf0, 0xc2, 0xc7, 0x30, 0x67, 0xda, 0xda, 0x5d, 0xe8, 0xae, 0xde, 0x9d,
	0x39, 0xfb, 0xcf, 0x37, 0x73, 0xe6, 0x9f, 0x2d, 0xcc, 0x28, 0x4a, 0x3f, 0x46, 0x5d, 0x6a, 0x27,
	0xa9, 0xd4, 0x12, 0x1b, 0xa7, 0x49, 0x9a, 0x74, 0xdc, 0xe5, 0x50, 0xca, 0xb0, 0x4f, 0xbe, 0x48,
	0x22, 0x5f, 0xc4, 0xb1, 0xd4, 0x42, 0x47, 0x32, 0x56, 0x99, 0xc8, 0x3b, 0x06, 0xd8, 0x23, 0xd5,
	0x4d, 0xa3, 0x44, 0xcb, 0x14, 0x97, 0x61, 0xea, 0x8c, 0x7a, 0x91, 0x38, 0xfa, 0x9c, 0x90, 0x63,
	0xad, 0x5a, 0x9b, 0x53, 0x41, 0x79, 0x81, 0x08, 0xb6, 0x8a, 0xbe, 0x90, 0x53, 0x5b, 0xb5, 0x36,
	0xeb, 0x01, 0x9f, 0x71, 0x01, 0x9a, 0xbd, 0x28, 0x24, 0xa5, 0x9d, 0x3a, 0xcb, 0xf3, 0xc8, 0xfb,
	0x6d, 0xc1, 0xec, 0xa1, 0xe8, 0x9e, 0x8a, 0x90, 0x0e, 0x44, 0x1c, 0xbd, 0x23, 0xa5, 0xf1, 0x3e,
	0xcc, 0xa8, 0xee, 0x7b, 0x3a, 0x13, 0xc7, 0x94, 0xaa, 0x48, 0xc6, 0x5c, 0xa1, 0x1e, 0x0c, 0x5f,
	0x0e, 0xf7, 0x50, 0xbb, 0xda, 0xc3, 0x43, 0x98, 0x48, 0x32, 0x2c, 0x17, 0x9c, 0xde, 0xb9, 0xd9,
	0xe6, 0x67, 0xb6, 0xcb, 0x57, 0x04, 0x85, 0x02, 0x9f, 0x40, 0xab, 0x47, 0x09, 0xc5, 0x3d, 0x8a,
	0xbb, 0x11, 0x29, 0xc7, 0x5e, 0xad, 0x57, 0x67, 0x0c, 0xc9, 0x70, 0x1b, 0x26, 0x73, 0x82, 0x72,
	0x1a, 0xa3, 0x52, 0xfe, 0x4a, 0xbc, 0x19, 0x98, 0x7e, 0x11, 0x29, 0x1d, 0xd0, 0x87, 0x73, 0xf3,
	0xf2, 0x37, 0xd0, 0xca, 0x42, 0x95, 0xc8, 0x58, 0x11, 0xfa, 0xd0, 0x48, 0x29, 0x91, 0xca, 0xb1,
	0x18, 0x75, 0x27, 0x47, 0x0d, 0x6a, 0xda, 0x81, 0x11, 0x04, 0x99, 0xce, 0x5d, 0x82, 0x06, 0xc7,
	0x66, 0xde, 0xb1, 0x38, 0x2b, 0x8c, 0xe0, 0xb3, 0xb7, 0x0e, 0xb3, 0x26, 0xf3, 0x48, 0x84, 0x2a,
	0x2f, 0x58, 0x29, 0xd3, 0x30, 0x57, 0xca, 0xf2, 0x46, 0x2a, 0x74, 0xf8, 0x08, 0x6c, 0x2d, 0x42,
	0xe5, 0xd4, 0xb8, 0xb7, 0xe5, 0x81, 0xde, 0x06, 0x53, 0xdb, 0x1c, 0xb0, 0xd2, 0x75, 0xc1, 0x36,
	0x51, 0x65, 0xd5, 0x13, 0x80, 0x23, 0x11, 0x8e, 0xe9, 0x0b, 0xe7, 0xa0, 0xae, 0x45, 0x98, 0xdb,
	0x6a, 0x8e, 0xb8, 0x0e, 0x76, 0x8f, 0x54, 0x77, 0xb4, 0x9b, 0xfc, 0xb3, 0x77, 0x00, 0xd3, 0xcf,
	0xfa, 0xb2, 0x33, 0x8e, 0x5d, 0xae, 0x62, 0x6d, 0x70, 0x15, 0x8d, 0xb6, 0xd3, 0x97, 0x1d, 0xae,
	0xd0, 0x0a, 0xf8, 0xec, 0x79, 0xd0, 0xca, 0x70, 0xe5, 0x6c, 0x58, 0x63, 0x95, 0x9a, 0x9d, 0xef,
	0x75, 0xb0, 0x8d, 0x11, 0xf8, 0x1c, 0x6c, 0x33, 0x11, 0xc4, 0x21, 0xeb, 0xb8, 0x11, 0x77, 0xbe,
	0xc2, 0x4e, 0xef, 0xd6, 0xd7, 0x9f, 0xbf, 0xbe, 0xd5, 0x6e, 0x60, 0xcb, 0x67, 0x47, 0xfd, 0x28,
	0xee, 0xd1, 0x27, 0x7c, 0x05, 0x93, 0xc5, 0x60, 0x71, 0xe1, 0xda, 0xa4, 0x33, 0xdc, 0xe2, 0x08,
	0x07, 0xbc, 0x15, 0x46, 0x2e, 0xe2, 0xed, 0x1c, 0x79, 0x61, 0x9e, 0xfc, 0x74, 0x6b, 0xeb, 0xd2,
	0x37, 0xae, 0xe0, 0x4b, 0x68, 0xee, 0x93, 0xc9, 0xc0, 0x62, 0x82, 0xa5, 0x11, 0x6e, 0x51, 0xec,
	0xca, 0xff, 0xd1, 0x5b, 0x63, 0xe6, 0x0a, 0x2e, 0x55, 0x32, 0xfd, 0x0b, 0x2d, 0xc2, 0x4b, 0x3c,
	0x81, 0xe6, 0xe1, 0xf9, 0x28, 0xf2, 0x75, 0xbb, 0xbc, 0x07, 0x0c, 0x5d, 0x73, 0xc7, 0x41, 0x77,
	0xd9, 0x53, 0x3c, 0x86, 0xa9, 0x3d, 0xea, 0x93, 0xa6, 0xff, 0xa7, 0xe7, 0x2d, 0x8f, 0xa5, 0xef,
	0xfc, 0xb0, 0xc0, 0x36, 0xee, 0xe2, 0x5b, 0x98, 0x38, 0x3c, 0xd7, 0x7c, 0x2c, 0xbc, 0x1b, 0x58,
	0xa2, 0x2a, 0xfe, 0x36, 0xf3, 0x37, 0xdc, 0xbb, 0xd7, 0xf8, 0x66, 0x25, 0x94, 0x7f, 0x91, 0xed,
	0xd4, 0xe5, 0x2e, 0xaf, 0x08, 0xbe, 0x86, 0x89, 0x7d, 0x1a, 0x5d, 0x60, 0x7e, 0xe8, 0x2e, 0x77,
	0x72, 0x83, 0x4b, 0xdc, 0xc3, 0x7f, 0x95, 0xe8, 0x34, 0xf9, 0x0b, 0xfd, 0xf8, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x75, 0x89, 0x1b, 0x52, 0xd7, 0x05, 0x00, 0x00,
}
